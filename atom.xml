<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有理想的黄坚强</title>
  
  <subtitle>博客</subtitle>
  <link href="http://huangyanglai-blog.cn/atom.xml" rel="self"/>
  
  <link href="http://huangyanglai-blog.cn/"/>
  <updated>2021-12-06T13:29:32.011Z</updated>
  <id>http://huangyanglai-blog.cn/</id>
  
  <author>
    <name>黄坚强</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于yolov3的光伏板热斑检测</title>
    <link href="http://huangyanglai-blog.cn/2021/12/06/%E5%9F%BA%E4%BA%8Eyolov3%E7%9A%84%E5%85%89%E4%BC%8F%E6%9D%BF%E7%83%AD%E6%96%91%E6%A3%80%E6%B5%8B/"/>
    <id>http://huangyanglai-blog.cn/2021/12/06/%E5%9F%BA%E4%BA%8Eyolov3%E7%9A%84%E5%85%89%E4%BC%8F%E6%9D%BF%E7%83%AD%E6%96%91%E6%A3%80%E6%B5%8B/</id>
    <published>2021-12-06T12:37:36.000Z</published>
    <updated>2021-12-06T13:29:32.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>需要具备知识：<br>1，python知识<br>2，opencv基础知识<br>3，pytorch框架<br>4，基本神经网络知识（yolov3）</p></blockquote><p>#主干代码（建议将52<em>52，26</em>26，13*13网格变小（由于光斑点一般较小））—-借鉴博主Bubbliiing<br>    class BasicBlock(nn.Module):<br>    def <strong>init</strong>(self, inplanes, planes):<br>        super(BasicBlock, self).<strong>init</strong>()<br>        self.conv1  = nn.Conv2d(inplanes, planes[0], kernel_size=1, stride=1, padding=0, bias=False)<br>        self.bn1    = nn.BatchNorm2d(planes[0])<br>        self.relu1  = nn.LeakyReLU(0.1)</p><pre><code>    self.conv2  = nn.Conv2d(planes[0], planes[1], kernel_size=3, stride=1, padding=1, bias=False)    self.bn2    = nn.BatchNorm2d(planes[1])    self.relu2  = nn.LeakyReLU(0.1)def forward(self, x):    residual = x    #print(&quot;输入&quot;,residual.size())    out = self.conv1(x)    out = self.bn1(out)    out = self.relu1(out)    #print(&quot;第一步&quot;,out.size())    out = self.conv2(out)    out = self.bn2(out)    out = self.relu2(out)    #print(&quot;第二步&quot;,out.size())    out += residual    #print(&quot;第三步&quot;,out.size())    return out</code></pre><p>class DarkNet(nn.Module):<br>    def <strong>init</strong>(self, layers):<br>        super(DarkNet, self).<strong>init</strong>()<br>        self.inplanes = 32<br>        # 416,416,3 -&gt; 416,416,32<br>        self.conv1  = nn.Conv2d(3, self.inplanes, kernel_size=3, stride=1, padding=1, bias=False)<br>        self.bn1    = nn.BatchNorm2d(self.inplanes)<br>        self.relu1  = nn.LeakyReLU(0.1)</p><pre><code>    # 416,416,32 -&gt; 208,208,64    self.layer1 = self._make_layer([32, 64], layers[0])#1    # 208,208,64 -&gt; 104,104,128    self.layer2 = self._make_layer([64, 128], layers[1])#2    # 104,104,128 -&gt; 52,52,256    self.layer3 = self._make_layer([128, 256], layers[2])#8    # 52,52,256 -&gt; 26,26,512    self.layer4 = self._make_layer([256, 512], layers[3])#8    # 26,26,512 -&gt; 13,13,1024    self.layer5 = self._make_layer([512, 1024], layers[4])#4    self.layers_out_filters = [64, 128, 256, 512, 1024]    # 进行权值初始化    for m in self.modules():        if isinstance(m, nn.Conv2d):#啥意思呢，就是如果m的类型是nn.conv2d就进行权值初始化            n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels            m.weight.data.normal_(0, math.sqrt(2. / n))        elif isinstance(m, nn.BatchNorm2d):            m.weight.data.fill_(1)            m.bias.data.zero_()#---------------------------------------------------------------------##   在每一个layer里面，首先利用一个步长为2的3x3卷积进行下采样#   然后进行残差结构的堆叠#---------------------------------------------------------------------#def _make_layer(self, planes, blocks):    layers = []    # 下采样，步长为2，卷积核大小为3    #print(&quot;瞅瞅细节1_&#123;&#125;&quot;.format(self.inplanes))    #print(&quot;瞅瞅细节2_&#123;&#125;&quot;.format(planes[1]))    layers.append((&quot;ds_conv&quot;, nn.Conv2d(self.inplanes, planes[1], kernel_size=3, stride=2, padding=1, bias=False)))    layers.append((&quot;ds_bn&quot;, nn.BatchNorm2d(planes[1])))    layers.append((&quot;ds_relu&quot;, nn.LeakyReLU(0.1)))    # 加入残差结构    self.inplanes = planes[1]    for i in range(0, blocks):        layers.append((&quot;residual_&#123;&#125;&quot;.format(i), BasicBlock(self.inplanes, planes)))    #print(&quot;残差堆叠&quot;,nn.Sequential(OrderedDict(layers)))    return nn.Sequential(OrderedDict(layers))def forward(self, x):    x = self.conv1(x)    x = self.bn1(x)    x = self.relu1(x)    #print(&quot;未经过残差堆叠&quot;,x.size())    x = self.layer1(x)    #print(&quot;第一次残差堆叠&quot;,x.size())    x = self.layer2(x)    out3 = self.layer3(x)    out4 = self.layer4(out3)    out5 = self.layer5(out4)        return out3, out4, out5def darknet53():    model = DarkNet([1, 2, 8, 8, 4])    return model</code></pre><h1 id="特征金字塔"><a href="#特征金字塔" class="headerlink" title="特征金字塔"></a>特征金字塔</h1><pre><code>def conv2d(filter_in, filter_out, kernel_size):    pad = (kernel_size - 1) // 2 if kernel_size else 0    return nn.Sequential(OrderedDict([        (&quot;conv&quot;, nn.Conv2d(filter_in, filter_out, kernel_size=kernel_size, stride=1, padding=pad, bias=False)),        (&quot;bn&quot;, nn.BatchNorm2d(filter_out)),        (&quot;relu&quot;, nn.LeakyReLU(0.1)),    ]))#------------------------------------------------------------------------##   make_last_layers里面一共有七个卷积，前五个用于提取特征。#   后两个用于获得yolo网络的预测结果#------------------------------------------------------------------------#def make_last_layers(filters_list, in_filters, out_filter):    m = nn.Sequential(        conv2d(in_filters, filters_list[0], 1),        conv2d(filters_list[0], filters_list[1], 3),        conv2d(filters_list[1], filters_list[0], 1),        conv2d(filters_list[0], filters_list[1], 3),        conv2d(filters_list[1], filters_list[0], 1),        conv2d(filters_list[0], filters_list[1], 3),        nn.Conv2d(filters_list[1], out_filter, kernel_size=1, stride=1, padding=0, bias=True)    )    return mclass YoloBody(nn.Module):    def __init__(self, anchors_mask, num_classes):        super(YoloBody, self).__init__()        #---------------------------------------------------#           #   生成darknet53的主干模型        #   获得三个有效特征层，他们的shape分别是：        #   52,52,256        #   26,26,512        #   13,13,1024        #---------------------------------------------------#        self.backbone = darknet53()        #---------------------------------------------------#        #   out_filters : [64, 128, 256, 512, 1024]        #---------------------------------------------------#        out_filters = self.backbone.layers_out_filters        #------------------------------------------------------------------------#        #   计算yolo_head的输出通道数，对于voc数据集而言        #   final_out_filter0 = final_out_filter1 = final_out_filter2 = 75        #------------------------------------------------------------------------#        self.last_layer0            = make_last_layers([512, 1024], out_filters[-1], len(anchors_mask[0]) * (num_classes + 5))        self.last_layer1_conv       = conv2d(512, 256, 1)        self.last_layer1_upsample   = nn.Upsample(scale_factor=2, mode=&#39;nearest&#39;)        self.last_layer1            = make_last_layers([256, 512], out_filters[-2] + 256, len(anchors_mask[1]) * (num_classes + 5))        self.last_layer2_conv       = conv2d(256, 128, 1)        self.last_layer2_upsample   = nn.Upsample(scale_factor=2, mode=&#39;nearest&#39;)        self.last_layer2            = make_last_layers([128, 256], out_filters[-3] + 128, len(anchors_mask[2]) * (num_classes + 5))    def forward(self, x):        #---------------------------------------------------#           #   获得三个有效特征层，他们的shape分别是：        #   52,52,256；26,26,512；13,13,1024        #---------------------------------------------------#        x2, x1, x0 = self.backbone(x)        #---------------------------------------------------#        #   第一个特征层        #   out0 = (batch_size,255,13,13)        #---------------------------------------------------#        # 13,13,1024 -&gt; 13,13,512 -&gt; 13,13,1024 -&gt; 13,13,512 -&gt; 13,13,1024 -&gt; 13,13,512        out0_branch = self.last_layer0[:5](x0)        out0        = self.last_layer0[5:](out0_branch)        # 13,13,512 -&gt; 13,13,256 -&gt; 26,26,256        x1_in = self.last_layer1_conv(out0_branch)        x1_in = self.last_layer1_upsample(x1_in)        # 26,26,256 + 26,26,512 -&gt; 26,26,768        x1_in = torch.cat([x1_in, x1], 1)        #---------------------------------------------------#        #   第二个特征层        #   out1 = (batch_size,255,26,26)        #---------------------------------------------------#        # 26,26,768 -&gt; 26,26,256 -&gt; 26,26,512 -&gt; 26,26,256 -&gt; 26,26,512 -&gt; 26,26,256        out1_branch = self.last_layer1[:5](x1_in)        out1        = self.last_layer1[5:](out1_branch)        # 26,26,256 -&gt; 26,26,128 -&gt; 52,52,128        x2_in = self.last_layer2_conv(out1_branch)        x2_in = self.last_layer2_upsample(x2_in)        # 52,52,128 + 52,52,256 -&gt; 52,52,384        x2_in = torch.cat([x2_in, x2], 1)        #---------------------------------------------------#        #   第一个特征层        #   out3 = (batch_size,255,52,52)        #---------------------------------------------------#        # 52,52,384 -&gt; 52,52,128 -&gt; 52,52,256 -&gt; 52,52,128 -&gt; 52,52,256 -&gt; 52,52,128        out2 = self.last_layer2(x2_in)        return out0, out1, out2</code></pre><p>#解码网络略<br>#实验结果如下图</p><p><img src="https://s2.loli.net/2021/12/06/obAlWgrU5O7eY3S.png"></p><p><img src="https://s2.loli.net/2021/12/06/6r1oBGOx9QW3Ybq.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;需要具备知识：&lt;br&gt;1，python知识&lt;br&gt;2，opencv基础知识&lt;br&gt;3，pytorch框架&lt;br&gt;4，</summary>
      
    
    
    
    <category term="图像检测" scheme="http://huangyanglai-blog.cn/categories/%E5%9B%BE%E5%83%8F%E6%A3%80%E6%B5%8B/"/>
    
    
    <category term="深度学习" scheme="http://huangyanglai-blog.cn/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于stm32f407单片机与ov2640摄像头与yolov3的上位机制作</title>
    <link href="http://huangyanglai-blog.cn/2021/11/21/%E5%9F%BA%E4%BA%8Estm32f407%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8Eov2640%E6%91%84%E5%83%8F%E5%A4%B4%E4%B8%8Eyolov3%E7%9A%84%E4%B8%8A%E4%BD%8D%E6%9C%BA%E5%88%B6%E4%BD%9C/"/>
    <id>http://huangyanglai-blog.cn/2021/11/21/%E5%9F%BA%E4%BA%8Estm32f407%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8Eov2640%E6%91%84%E5%83%8F%E5%A4%B4%E4%B8%8Eyolov3%E7%9A%84%E4%B8%8A%E4%BD%8D%E6%9C%BA%E5%88%B6%E4%BD%9C/</id>
    <published>2021-11-21T12:15:58.000Z</published>
    <updated>2021-11-21T13:07:09.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>需要具备知识：</p><p>1，基本单片机应用知识（本上位机默认使用正点原子探索者摄像头例程）<br>2，基本opencv知识<br>3，基本神经网络知识（yolov3）<br>4，基本pyqt串口知识<br>5，以及数据包查找方式</p></blockquote><h1 id="单片机部分代码"><a href="#单片机部分代码" class="headerlink" title="单片机部分代码"></a>单片机部分代码</h1><pre><code>if(jpeg_data_ok==1)    //已经采集完一帧图像了</code></pre><p>{  </p><pre><code>p=(u8*)jpeg_buf;LCD_ShowString(30,210,210,16,16,&quot;Sending JPEG data...&quot;); //提示正在传输数据for(i=0;i&lt;jpeg_data_len*4;i++)        //dma传输1次等于4字节,所以乘以4.&#123;    while(USART_GetFlagStatus(USART1,USART_FLAG_TC)==RESET);    //循环发送,直到发送完毕              USART_SendData(USART1,p[i]);     key=KEY_Scan(0);     if(key)break;&#125;</code></pre><p>}</p><h1 id="opencv-yolov3部分代码"><a href="#opencv-yolov3部分代码" class="headerlink" title="opencv+yolov3部分代码"></a>opencv+yolov3部分代码</h1><pre><code>def data_receive(self):    while(self.mSerial.isOpen()):        try:            num=self.mSerial.inWaiting()            #print(&quot;num是啥&quot;,num)        except:            self.mSerial.close()            self.data=0            self.signalRecieve.emit(self.data)        if num&gt;5000:             if self.mSerial.isOpen():                 self.data=self.mSerial.read(num)#16进制                 # self.data = self.mSerial.read(num).decode(&quot;gbk&quot;) #串口接收数据gbk                 data=self.data                 print(&quot;接受到数据了&quot;)                 need_data=bytes_link(data)                 if(sum(need_data)==0):                     img_decode=last_img_decode                 else:                     img_decode=cv2.imdecode(need_data,cv2.IMREAD_COLOR)                 last_img_decode=img_decode                 print(img_decode.shape)                 #img_decode=cv2.resize(img_decode,(561, 251),interpolation=cv2.INTER_AREA )                 img_decode=cv2.cvtColor(img_decode,cv2.COLOR_BGR2RGB)                 img_decode=self.process_frame(img_decode)                 self.Qframe=QImage(img_decode.data,img_decode.shape[1],img_decode.shape[0],QImage.Format_RGB888)                 md.label_view.setPixmap(QPixmap.fromImage(self.Qframe))                                  #self.textBrowser.insertPlainText(data1)                 #self.textBrowser.moveCursor(self.textBrowser.textCursor().End)        time.sleep(0.001)        md.update()</code></pre><p>#pyqt串口部分<br>          self.mSerial.port=self.comboBox_uart_num.currentText()#获取端口号<br>        self.mSerial.baudrate=self.comboBox_rate.currentText()#获取波特率<br>        self.mSerial.bytesize =8        #数据位<br>        self.mSerial.stopbits = 1      #停止位<br>        self.mSerial.parity = serial.PARITY_NONE  #奇偶校验位  </p><p>#jpeg压缩数据解包<br>    def bytes_link(data):<br>        global last_img_encode<br>        data_tou=bytes([0xFF,0xD8])<br>        data_end=bytes([0xFF,0xD9])<br>        pos=data.find(data_tou)<br>        pos_end=data.find(data_end)<br>        weneed=data[pos:pos_end+2]<br>        nparr=np.fromstring(weneed,np.uint8)</p><p><img src="https://i.loli.net/2021/11/21/ndjar1tl7M8UocL.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;需要具备知识：&lt;/p&gt;
&lt;p&gt;1，基本单片机应用知识（本上位机默认使用正点原子探索者摄像头例程）&lt;br&gt;2，基本op</summary>
      
    
    
    
    <category term="上位机制作" scheme="http://huangyanglai-blog.cn/categories/%E4%B8%8A%E4%BD%8D%E6%9C%BA%E5%88%B6%E4%BD%9C/"/>
    
    
    <category term="pyqt上位机制作" scheme="http://huangyanglai-blog.cn/tags/pyqt%E4%B8%8A%E4%BD%8D%E6%9C%BA%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>自我介绍</title>
    <link href="http://huangyanglai-blog.cn/2021/10/01/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <id>http://huangyanglai-blog.cn/2021/10/01/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-10-01T05:55:44.000Z</published>
    <updated>2021-10-01T08:04:00.059Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><blockquote><p>嗯，如何介绍呢？</p><p>嗯，那就是师范大学毕业的自动化小辣鸡；<br>嗯。那也是电力大学在读的人工智障；<br>嗯，那就是单身23年的老男孩；<br>嗯，那就是喜欢张海宇4年的XXX；<br>嗯，也是掉进航模，车模，船模坑中的老舔狗；<br>嗯，也是喜欢嵌入式，却被迫给无良导师选定深度学习方向的年轻学渣；<br>嗯，我得技能，单片机软硬件，简单图像处理，深度学习不深入的应用，以及不懂力学的3d打印小技能，和不专业的Qt界面设计；</p></blockquote><p>最后祝福大家国庆快乐<br><img src="https://img0.baidu.com/it/u=2630303827,4177943159&fm=253&fmt=auto&app=120&f=JPEG?w=640&h=401"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;嗯，如何介绍呢？&lt;/p&gt;
&lt;p&gt;嗯，那就是师范大学毕业的自动化小辣鸡</summary>
      
    
    
    
    
    <category term="随笔" scheme="http://huangyanglai-blog.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://huangyanglai-blog.cn/2021/09/05/hello-world/"/>
    <id>http://huangyanglai-blog.cn/2021/09/05/hello-world/</id>
    <published>2021-09-05T14:04:29.546Z</published>
    <updated>2021-09-05T14:04:29.546Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
